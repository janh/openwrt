--- a/net/dsa/slave.c
+++ b/net/dsa/slave.c
@@ -314,6 +314,15 @@ static int dsa_slave_port_attr_set(struc
 
 		ret = dsa_port_bridge_flags(dp, attr->u.brport_flags, extack);
 		break;
+	case SWITCHDEV_ATTR_ID_BRIDGE_MROUTER:
+ 		ret = dsa_port_mrouter(dp->cpu_dp, attr->u.mrouter, extack);
+ 		break;
+	case SWITCHDEV_ATTR_ID_PORT_MROUTER:
+		if (!dsa_port_offloads_bridge_port(dp, attr->orig_dev))
+			return -EOPNOTSUPP;
+
+		ret = dsa_port_mrouter(dp, attr->u.mrouter, extack);
+		break;
 	default:
 		ret = -EOPNOTSUPP;
 		break;
--- a/include/net/dsa.h
+++ b/include/net/dsa.h
@@ -784,6 +784,8 @@ struct dsa_switch_ops {
 	int	(*port_bridge_flags)(struct dsa_switch *ds, int port,
 				     struct switchdev_brport_flags flags,
 				     struct netlink_ext_ack *extack);
+	int	(*port_set_mrouter)(struct dsa_switch *ds, int port, bool mrouter,
+				    struct netlink_ext_ack *extack);
 
 	/*
 	 * VLAN support
--- a/net/dsa/dsa_priv.h
+++ b/net/dsa/dsa_priv.h
@@ -255,6 +255,8 @@ int dsa_port_pre_bridge_flags(const stru
 int dsa_port_bridge_flags(struct dsa_port *dp,
 			  struct switchdev_brport_flags flags,
 			  struct netlink_ext_ack *extack);
+int dsa_port_mrouter(struct dsa_port *dp, bool mrouter,
+		     struct netlink_ext_ack *extack);
 int dsa_port_vlan_add(struct dsa_port *dp,
 		      const struct switchdev_obj_port_vlan *vlan,
 		      struct netlink_ext_ack *extack);
--- a/net/dsa/port.c
+++ b/net/dsa/port.c
@@ -745,6 +745,17 @@ int dsa_port_bridge_flags(struct dsa_por
 	return 0;
 }
 
+int dsa_port_mrouter(struct dsa_port *dp, bool mrouter,
+		     struct netlink_ext_ack *extack)
+{
+	struct dsa_switch *ds = dp->ds;
+
+	if (!ds->ops->port_set_mrouter)
+		return -EOPNOTSUPP;
+
+	return ds->ops->port_set_mrouter(ds, dp->index, mrouter, extack);
+}
+
 int dsa_port_mtu_change(struct dsa_port *dp, int new_mtu,
 			bool targeted_match)
 {
