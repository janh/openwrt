--- a/src/common/drv_dsl_cpe_os_linux.c
+++ b/src/common/drv_dsl_cpe_os_linux.c
@@ -625,7 +625,11 @@ DSL_void_t* DSL_DRV_VMalloc(
    DSL_DRV_size_t    nSize)
 {
    /* VRX500-BU: Better to use vmalloc or vzmalloc here?! */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,9,0)
    return __vmalloc((unsigned long)nSize, GFP_KERNEL, PAGE_KERNEL);
+#else
+   return __vmalloc((unsigned long)nSize, GFP_KERNEL);
+#endif
    /*   return vmalloc(nSize);*/
 }
 
@@ -1051,12 +1055,19 @@ DSL_int32_t DSL_DRV_ThreadShutdown(
 
 DSL_uint32_t DSL_DRV_SysTimeGet(DSL_uint32_t nOffset)
 {
-   struct timeval tv;
    DSL_uint32_t nTime = 0;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 0, 0))
+   struct timeval tv;
 
    memset(&tv, 0, sizeof(tv));
    do_gettimeofday(&tv);
    nTime = (DSL_uint32_t)tv.tv_sec;
+#else
+   struct timespec64 now;
+
+   ktime_get_real_ts64(&now);
+   nTime = (DSL_uint32_t)now.tv_sec;
+#endif
 
    if ( (nOffset == 0) || (nOffset > nTime) )
    {
--- a/src/common/drv_dsl_cpe_api.c
+++ b/src/common/drv_dsl_cpe_api.c
@@ -240,6 +240,7 @@ DSL_Error_t DSL_DRV_HandleLinitValue(
 
    switch(nSub)
    {
+#if defined(DSL_VRX_DEVICE_VR11)
       case LINIT_SUB_S_REBOOT_REQ:
       {
          DSL_DEBUG(DSL_DBG_ERR,
@@ -262,6 +263,7 @@ DSL_Error_t DSL_DRV_HandleLinitValue(
 
          break;
       }
+#endif /* defined(DSL_VRX_DEVICE_VR11) */
       case LINIT_SUB_S_IMAP_DRIVER_REQ_ON:
       {
          if (DSL_DRV_BONDING_ENABLED && DSL_DRV_LINES_PER_DEVICE == 1)
--- a/src/pm/drv_dsl_cpe_pm_core.c
+++ b/src/pm/drv_dsl_cpe_pm_core.c
@@ -26,6 +26,7 @@
 #define DSL_DBG_BLOCK DSL_DBG_PM
 
 #ifdef __LINUX__
+#ifndef DSL_DEBUG_DISABLE
 #define DSL_PM_CORE_RATELIMIT_INTERVAL     20 * HZ /* for each 20 seconds */
 #define DSL_PM_CORE_RATELIMIT_BURST        1       /* 1 occurrence */
 /* struct ratelimit_state to be used in DSL_DEBUG_LIMIT */
@@ -33,6 +34,7 @@ static DEFINE_RATELIMIT_STATE(
    DSL_DBG_RATELIMIT_STRUCT_NAME(DSL_DBG_BLOCK),
    DSL_PM_CORE_RATELIMIT_INTERVAL,
    DSL_PM_CORE_RATELIMIT_BURST);
+#endif
 #endif/* __LINUX__ */
 
 DSL_boolean_t DSL_DRV_PM_IsPmReady(
@@ -794,7 +796,9 @@ DSL_int_t DSL_DRV_PM_ThreadNe(DSL_DRV_Th
    DSL_int_t nOsRet = 0;
    DSL_Context_t *pContext = (DSL_Context_t*)param->nArg1;
    DSL_uint32_t startTime, stopTime;
+#if defined(DSL_VRX_DEVICE_VR11)
    DSL_boolean_t bPowerDown = DSL_FALSE;
+#endif
 
    DSL_DEBUG( DSL_DBG_MSG,
       (pContext, SYS_DBG_MSG"DSL[%02d]: IN - DSL_DRV_PM_ThreadNe"
@@ -831,9 +835,11 @@ DSL_int_t DSL_DRV_PM_ThreadNe(DSL_DRV_Th
       if (DSL_DRV_SIGNAL_PENDING)
          break;
 
+#if defined(DSL_VRX_DEVICE_VR11)
       DSL_CTX_READ_SCALAR(pContext, nErrCode, bPowerDown, bPowerDown);
       if (bPowerDown)
          break;
+#endif
 
       /* Get Start Time*/
       startTime = DSL_DRV_PM_TIME_GET();
@@ -927,7 +933,9 @@ DSL_int_t DSL_DRV_PM_ThreadFe(DSL_DRV_Th
    DSL_int_t nOsRet = 0;
    DSL_Context_t *pContext = (DSL_Context_t*)param->nArg1;
    DSL_uint32_t startTime, stopTime;
+#if defined(DSL_VRX_DEVICE_VR11)
    DSL_boolean_t bPowerDown = DSL_FALSE;
+#endif
 
    DSL_DEBUG( DSL_DBG_MSG,
       (pContext, SYS_DBG_MSG"DSL[%02d]: IN - DSL_DRV_PM_ThreadFe"
@@ -962,9 +970,11 @@ DSL_int_t DSL_DRV_PM_ThreadFe(DSL_DRV_Th
       if (DSL_DRV_SIGNAL_PENDING)
          break;
 
+#if defined(DSL_VRX_DEVICE_VR11)
       DSL_CTX_READ_SCALAR(pContext, nErrCode, bPowerDown, bPowerDown);
       if (bPowerDown)
          break;
+#endif
 
       /* Get Start Time*/
       startTime = DSL_DRV_PM_TIME_GET();
--- a/src/include/drv_dsl_cpe_debug.h
+++ b/src/include/drv_dsl_cpe_debug.h
@@ -96,6 +96,7 @@ DSL_void_t DSL_DRV_ErrorSet(DSL_void_t *
    #define DSL_DEBUG_HDR(level, body)      ((void)0)
    /** Macro to just print debug body without header if line is in specified range */
    #define DSL_DEBUG(level, body)   ((void)0)
+   #define DSL_DEBUG_LIMIT(level, body)    DSL_DEBUG(level, body)
    /** Terminate execution if assertion fails */
    #define DSL_ASSERT(exp)                 ((void)0)
 
--- a/src/device/drv_dsl_cpe_msg_vrx.c
+++ b/src/device/drv_dsl_cpe_msg_vrx.c
@@ -148,12 +148,16 @@ static DSL_uint16_t g_VRxMsgWhitelist[]
    CMD_RTX_US_STATSGET,             /*     +     :      +      :      +       */
    CMD_RTX_PM_DS_GET,               /*     +     :      +      :      +       */
    CMD_RTX_PM_US_GET,               /*     +     :      +      :      -/+     */
+#ifndef FW_R9
    CMD_BONDING_HS_CONTROL,              /*     +     :      +      :      -/+     */
+#endif
    CMD_PAF_HS_STATUSGET,            /*     +     :      +      :      -/+     */
    CMD_PAF_HS_CONTINUE,             /*     +     :      +      :      -/+     */
    CMD_OPERATIONOPTIONSSET,         /*     +     :      +      :      +       */
    CMD_MFD_RESULTSGET,              /*     +     :      +      :      +/-     */
+#ifndef FW_R9
    CMD_MFD_INITRESULTSGET,          /*     +     :      +      :      +/-     */
+#endif
    CMD_MFD_LOOPLENGTHGET,           /*     +     :      +      :      +/-     */
    CMD_MFD_HYBRIDINFOGET,           /*     +     :      +      :      +/-     */
    CMD_MISC_CONFIGSET,              /*     +     :      +      :      +       */
@@ -4138,6 +4142,7 @@ DSL_Error_t DSL_DRV_VRX_SendMsgOlrContro
       sCmd.TxBitswap = bBitswapEnableUs ? VRX_ENABLE : VRX_DISABLE;
    }
 
+#ifndef FW_R9
    nErrCode = DSL_DRV_VRX_FirmwareVersionCheck(pContext,
                DSL_MIN_FW_VERSION_VR11_R6, &nVerCheck);
 
@@ -4156,6 +4161,7 @@ DSL_Error_t DSL_DRV_VRX_SendMsgOlrContro
       sCmd.RxBitswap_ROC = VRX_ENABLE;
       sCmd.TxBitswap_ROC = VRX_ENABLE;
    }
+#endif /* FW_R9 */
 
    nErrCode = DSL_DRV_VRX_SendMessage(
                  pContext, CMD_OLR_CONTROL,
@@ -4317,6 +4323,7 @@ DSL_Error_t DSL_DRV_VRX_SendMsgRtxContro
       }
    }
 
+#ifndef FW_R9
    nRetCode = DSL_DRV_VRX_FirmwareVersionCheck(pContext,
                                                DSL_MIN_FW_VERSION_VR11_R6,
                                                &nVerCheck);
@@ -4339,6 +4346,7 @@ DSL_Error_t DSL_DRV_VRX_SendMsgRtxContro
             bRocEnable);
       sCmd.ROC_DS = bRocEnable;
    }
+#endif /* FW_R9 */
 
    sCmd.Length = DSL_VRX_16BIT_RD_MSG_LEN_GET(sCmd);
 
@@ -5271,6 +5279,7 @@ DSL_Error_t DSL_DRV_VRX_SendMsgImapContr
    DSL_Context_t *pContext)
 {
    DSL_Error_t nErrCode = DSL_SUCCESS;
+#ifndef FW_R9
    CMD_IMAP_Control_t sCmd;
    ACK_IMAP_Control_t sAck;
    DSL_boolean_t bImapActivate = DSL_FALSE;
@@ -5292,6 +5301,9 @@ DSL_Error_t DSL_DRV_VRX_SendMsgImapContr
    DSL_DEBUG( DSL_DBG_MSG,
       (pContext, SYS_DBG_MSG"DSL[%02d]: OUT - DSL_DRV_VRX_SendMsgImapControl()"
       DSL_DRV_CRLF, DSL_DEV_NUM(pContext)));
+#endif /* FW_R9 */
+
+   nErrCode = DSL_ERROR;
 
    return (nErrCode);
 }
@@ -6985,6 +6997,7 @@ DSL_Error_t DSL_DRV_VRX_SendMsgModemFSME
    DSL_boolean_t value)
 {
    DSL_Error_t nErrCode = DSL_SUCCESS;
+#if !defined(DSL_VRX_DEVICE_VR9)
    CMD_ModemFSM_EventConfigure_t sCmd;
    ACK_ModemFSM_EventConfigure_t sAck;
    DSL_uint16_t flag = value == DSL_TRUE ? VRX_ENABLE : VRX_DISABLE;
@@ -7016,6 +7029,7 @@ DSL_Error_t DSL_DRV_VRX_SendMsgModemFSME
    DSL_DEBUG( DSL_DBG_MSG,
       (pContext, SYS_DBG_MSG"DSL[%02d]: OUT - DSL_DRV_VRX_SendMsgModemFSMEventConfigure"
       DSL_DRV_CRLF, DSL_DEV_NUM(pContext)));
+#endif /* !defined(DSL_VRX_DEVICE_VR9) */
 
    return (nErrCode);
 }
@@ -7076,6 +7090,13 @@ DSL_Error_t DSL_DRV_VRX_SendMsgFeatureMa
 
    return (nErrCode);
 }
+#else
+DSL_Error_t DSL_DRV_VRX_SendMsgFeatureMapGet(
+   DSL_Context_t *pContext,
+   DSL_uint8_t *pAck)
+{
+   return DSL_ERROR;
+}
 #endif /* (DSL_VRX_DEVICE_VR11) */
 
 /*
--- a/src/include/drv_dsl_cpe_intern.h
+++ b/src/include/drv_dsl_cpe_intern.h
@@ -2387,7 +2387,7 @@ DSL_Error_t DSL_DRV_VRX_SendMsgModemFSME
    DSL_IN DSL_boolean_t value);
 #endif
 
-#if defined (DSL_VRX_DEVICE_VR11)
+#if 1
 #ifndef SWIG
 DSL_Error_t DSL_DRV_VRX_SendMsgFeatureMapGet(
    DSL_IN DSL_Context_t *pContext,
--- a/src/device/drv_dsl_cpe_device_vrx.c
+++ b/src/device/drv_dsl_cpe_device_vrx.c
@@ -23,8 +23,6 @@
 #if (DSL_DRV_ATM_PTM_INTERFACE_ENABLE == 1)
 #ifdef DSL_VRX_DEVICE_VR11
 #include <net/dsl_tc.h>
-#else
-#include <net/ppa_stack_al.h>
 #endif
 #endif
 
@@ -1834,6 +1832,7 @@ DSL_Error_t DSL_DRV_VRX_FailReasonGet(
       lineInitSubStatus = LINIT_SUB_S_REBOOT_REQ;
       break;
 #endif /* defined (DSL_VRX_DEVICE_VR11) */
+#ifndef FW_R9
    case ALM_ModemFSM_FailReasonGet_S_IMAP_DRIVER_REQ_ON:
       lineInitSubStatus = LINIT_SUB_S_IMAP_DRIVER_REQ_ON;
       break;
@@ -1843,6 +1842,7 @@ DSL_Error_t DSL_DRV_VRX_FailReasonGet(
    case ALM_ModemFSM_FailReasonGet_S_PP_TC2LINE_RES:
       lineInitSubStatus = LINIT_SUB_S_TC2LINE_RESET;
       break;
+#endif /* FW_R9 */
    default:
       lineInitSubStatus = LINIT_SUB_UNKNOWN;
       break;
@@ -2792,6 +2792,7 @@ static DSL_Error_t DSL_DRV_VRX_ChannelSt
          pContext, nErrCode, lineFeatureDataSts[nDirection].bVirtualNoiseSupport,
          bVirtualNoiseEnable);
 
+#ifndef FW_R9
       nErrCode = DSL_DRV_VRX_FirmwareVersionCheck(pContext,
                DSL_MIN_FW_VERSION_VR11_R6, &nVerCheck);
 
@@ -2814,6 +2815,7 @@ static DSL_Error_t DSL_DRV_VRX_ChannelSt
             pContext, nErrCode, lineFeatureDataSts[nDirection].bRocEnable,
             bRocEnable);
       }
+#endif /* FW_R9 */
    }
 
    nErrCode = DSL_DRV_VRX_SendMsgOlrStatusGet(pContext, nDirection, (DSL_uint8_t*)&sAckOlr.FUS);
@@ -7252,9 +7254,11 @@ DSL_Error_t DSL_DRV_DEV_OlrStatisticsGet
    pData->data.nSraRequested = sAckOlr.FUS.SRA_Reqs;
    pData->data.nSraExecuted = sAckOlr.FUS.SRAsDone;
    pData->data.nSraRejected = sAckOlr.FUS.SRA_UTCs;
+#ifndef FW_R9
    pData->data.nSosRequested = sAckOlr.FUS.SOS_Reqs;
    pData->data.nSosExecuted = sAckOlr.FUS.SOS_Done;
    pData->data.nSosRejected = sAckOlr.FUS.SOS_UTCs;
+#endif /* FW_R9 */
 
    if (pData->nDirection == DSL_DOWNSTREAM)
    {
--- a/src/bnd/drv_dsl_cpe_api_bnd.c
+++ b/src/bnd/drv_dsl_cpe_api_bnd.c
@@ -452,6 +452,7 @@ static DSL_Error_t DSL_DRV_BND_BondingMo
       remote (means: current FW does not support IMA+ Bonding yet
       and PAF Bonding configuration can be only taken from
       remote) */
+#ifndef FW_R9
    if (pData->Length == 2)
    {
       switch (pData->Bonding)
@@ -469,6 +470,7 @@ static DSL_Error_t DSL_DRV_BND_BondingMo
       }
    }
    else
+#endif /* FW_R9 */
    {
       /* IMA+ Bonding enable status "FALSE" by definition,
          check only if PAF Bonding supported */
--- a/src/bnd/drv_dsl_cpe_api_bnd_vrx.c
+++ b/src/bnd/drv_dsl_cpe_api_bnd_vrx.c
@@ -40,6 +40,7 @@ static DSL_Error_t DSL_DRV_BND_VRX_HsCon
    DSL_BND_VRX_HsControl_t *pData)
 {
    DSL_Error_t nErrCode = DSL_SUCCESS;
+#ifndef FW_R9
    CMD_Bonding_HS_Control_t sCmd;
    ACK_Bonding_HS_Control_t sAck;
 
@@ -60,6 +61,9 @@ static DSL_Error_t DSL_DRV_BND_VRX_HsCon
    DSL_DEBUG(DSL_DBG_MSG, (pContext,
       SYS_DBG_MSG"DSL[%02d]: OUT - DSL_DRV_BND_VRX_HsControlSet, retCode=%d"
       DSL_DRV_CRLF, DSL_DEV_NUM(pContext), nErrCode));
+#endif /* FW_R9 */
+
+   nErrCode = DSL_ERROR;
 
    return nErrCode;
 }
@@ -148,6 +152,7 @@ static DSL_Error_t DSL_DRV_BND_VRX_ImapH
    DSL_BND_VRX_ImapHsStatus_t *pData)
 {
    DSL_Error_t nErrCode = DSL_SUCCESS;
+#ifndef FW_R9
    CMD_IMAP_HS_StatusGet_t sCmd;
    ACK_IMAP_HS_StatusGet_t sAck;
    ACK_ADSL_FeatureMapGet_t nFeatureMapGetAck = { 0 };
@@ -201,6 +206,9 @@ static DSL_Error_t DSL_DRV_BND_VRX_ImapH
    DSL_DEBUG(DSL_DBG_MSG, (pContext,
       SYS_DBG_MSG"DSL[%02d]: OUT - DSL_DRV_BND_VRX_ImapHsStatusGet, retCode=%d"
       DSL_DRV_CRLF, DSL_DEV_NUM(pContext), nErrCode));
+#endif /* FW_R9 */
+
+   nErrCode = DSL_ERROR;
 
    return nErrCode;
 }
